{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":[" "]},"docs":[{"location":"","title":"Selamat Datang","text":"<p>Selamat datang di catatan pribadi saya! Di sini, saya akan mendokumentasikan perjalanan pembelajaran saya, mulai dari konsep dasar hingga proyek-proyek yang sedang saya kerjakan. Tujuan utama dari catatan ini adalah untuk merangkum pemahaman saya, serta sebagai referensi di kemudian hari.</p> <p>Semoga bisa dimengerti \ud83e\udd2a</p>"},{"location":"belajar/container/docker/","title":"Docker","text":"<p>Docker adalah platform perangkat lunak open-source yang memungkinkan pengembang untuk membangun, menguji, dan menyebarkan aplikasi dengan cepat. Docker mengemas perangkat lunak ke dalam unit standar yang disebut kontainer, yang berisi semua yang dibutuhkan untuk menjalankan aplikasi.</p>"},{"location":"belajar/container/docker/#docker-dasar","title":"Docker Dasar","text":"<p>Container berfokus pada aplikasi. Container sendiri sebenarnya berjalan di atas aplikasi Container Manager yang berjalan di sistem operasi. Container akan menggunakan sistem operasi host dimana Container Manager berjalan. Dan Docker merupakan sebuah Container Manager.</p>"},{"location":"belajar/container/docker/#install","title":"Install","text":"<p>Untuk menginstall docker bisa dilihat Docker Docs.</p>"},{"location":"belajar/container/docker/#docker-registry","title":"Docker Registry","text":"<p>Docker Registry merupakan sebuah tempat untuk menyimpan image. Dengan menggunakan Docker Registry, kita bisa menyimpan image yang kita buat dan bisa digunakan di Docker Daemon dimanapun selama bisa terkoneksi ke Docker Registry. Dan kita juga bisa menggunakan image yang sudah dibuat oleh orang lain.</p> <p>Beberapa Docker Registry</p> <ul> <li>Docker Hub</li> <li>Digital Ocean Container Registry</li> <li>Google Cloud Container Registry</li> <li>Amazon Elastic Container Registry</li> <li>Azure Container Registry</li> </ul>"},{"location":"belajar/container/docker/#image","title":"Image","text":"<p>Docker Image mirip seperti installer aplikasi, dimana di dalam Docker Image terdapat aplikasi dan dependency. Image yang digunakan oleh Container tidak bisa dihapus.</p> <p>Command</p> <ul> <li> <p>Melihat daftar image <pre><code>docker image ls \n</code></pre></p> </li> <li> <p>Mendownload image dari docker registry, default tag <code>latest</code> <pre><code>docker image pull [image-name:tag]\n</code></pre></p> </li> <li> <p>Menghapus satu atau lebih image <pre><code>docker image rm [image-name:tag]\n</code></pre></p> </li> </ul>"},{"location":"belajar/container/docker/#volume","title":"Volume","text":"<p>Volume mirip dengan Bind Mounts, bedanya adalah terdapat management Volume, dimana kita bisa membuat, menghapus, dan melihat daftar Volume.</p> <p>Volume sendiri bisa dianggap storage yang digunakan untuk menyimpan data, bedanya dengan Bind Mounts, pada Bind Mounts, data disimpan pada sistem host, sedangkan pada Volume, data di manage oleh Docker.</p> <p>Command</p> <ul> <li> <p>Membuat volume baru <pre><code>docker volume create [volume-name] \n</code></pre></p> </li> <li> <p>Melihat daftar volume <pre><code>docker volume ls\n</code></pre></p> </li> <li> <p>Menghapus satu atau lebih volume <pre><code>docker volume rm [volume-name]\n</code></pre></p> </li> </ul>"},{"location":"belajar/container/docker/#container","title":"Container","text":"<p>Satu Docker Image bisa digunakan oleh beberapa Docker Container dengan syarat nama Docker Container berbeda.</p> <p>Command</p> <ul> <li> <p>Melihat semua container <pre><code>docker container ls -a \n</code></pre></p> </li> <li> <p>Melihat container yang sedang berjalan <pre><code>docker volume ls\n</code></pre></p> </li> <li> <p>Membuat container baru <pre><code>docker container create --name [container-name] [image-name:tag]\n</code></pre></p> </li> <li> <p>Menjalankan container <pre><code>docker container start [container-name/container-id]\n</code></pre></p> </li> <li> <p>Menghentikan container <pre><code>docker container stop [container-name/container-id]\n</code></pre></p> </li> <li> <p>Menghapus container <pre><code>docker container rm [container-name/container-id]\n</code></pre></p> </li> </ul>"},{"location":"belajar/container/docker/#container-log","title":"Container Log","text":"<p>Container Log digunakan untuk melihat log aplikasi di container.</p> <p>Command</p> <ul> <li> <p>Melihat log aplikasi di container <pre><code>docker container logs [container-name/container-id]\n</code></pre></p> </li> <li> <p>Melihat log aplikasi di container secara real-time <pre><code>docker container logs -f [container-name/container-id]\n</code></pre></p> </li> </ul>"},{"location":"belajar/container/docker/#container-exec","title":"Container Exec","text":"<p>Container Exec digunakan untuk masuk ke dalam container itu sendiri. Container Exec dapat digunakan untuk mengeksekusi kode program yang ada di dalam container.</p> <p>Command</p> <ul> <li>Masuk ke dalam container dan mengeksekusi kode program <pre><code>docker container exec -i -t [container-name/container-id] [command-to-execute]\n\n# -i untuk menjaga input tetap aktif\n# -t untuk alokasi pseudo-TTY (terminal akses)\n</code></pre></li> </ul>"},{"location":"belajar/container/docker/#container-port","title":"Container Port","text":"<p>Container pada dasarnya terisolasi di dalam Docker (Sistem Host tidak bisa mengakses aplikasi yang terdapat di dalam Container). Salah satu cara untuk mengaksesnya adalah menggunakan Container Exec.</p> <p>Selain Container Exec kita juga bisa melakukan port forwarding yaitu meneruskan sebuah port yang terdapat di sistem Host ke dalam Docker Container</p> <p>Command</p> <ul> <li>Melakukan port forwarding <pre><code>docker container create --name [container-name] --publish [port-host:port-container] [image-name:tag]\n</code></pre></li> </ul>"},{"location":"belajar/container/docker/#container-environment-variable","title":"Container Environment Variable","text":"<p>Digunakan untuk mengubah-ubah konfigurasi aplikasi secara dinamis.</p> <p>Command</p> <ul> <li>Manambahkan environment variable <pre><code>docker container create --name [container-name] --env [KEY1=VALUE1] --env [KEY2=VALUE2] [image-name:tag]\n</code></pre></li> </ul>"},{"location":"belajar/container/docker/#container-stats","title":"Container Stats","text":"<p>Digunakan untuk penggunaan resource yang digunakan oleh masing-masing container.</p> <ul> <li>Melihat penggunaan resource yang digunakan oleh container <pre><code>docker container stats\n</code></pre></li> </ul> CONTAINER ID NAME CPU % MEM USAGE / LIMIT MEM % NET I/O BLOCK I/O PIDS 420cb284a23d contohpostgres 0.00% 22.29MiB / 7.64GiB 0.28% 16.9kB / 3.58kB 15.9MB / 23.1MB 6"},{"location":"belajar/container/docker/#container-resource-limit","title":"Container Resource Limit","text":""},{"location":"belajar/container/docker/#container-volume","title":"Container Volume","text":""},{"location":"belajar/container/docker/#dockerfile","title":"Dockerfile","text":"<p>Example</p> Dockerfile<pre><code>FROM ubuntu\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\nRUN apt-get update &amp;&amp; apt-get install -y x11vnc xvfb firefox\nRUN mkdir ~/.vnc\n\n# Setup a password\nRUN x11vnc -storepasswd 1234 ~/.vnc/passwd\n\n# Autostart firefox (might not be the best way, but it does the trick)\nRUN bash -c 'echo \"firefox\" &gt;&gt; /.bashrc'\n\nEXPOSE 5900\nCMD [\"x11vnc\", \"-forever\", \"-usepw\", \"-create\"]\n</code></pre>"},{"location":"belajar/container/docker/#docker-compose","title":"Docker Compose","text":""},{"location":"belajar/etl/airbyte/","title":"Airbyte","text":"<p>Airbyte adalah infrastruktur pergerakan data sumber terbuka untuk membangun pipa data ekstrak dan beban (EL). Ini dirancang untuk keserbagunaan, skalabilitas, dan kemudahan penggunaan.</p>"},{"location":"belajar/etl/airbyte/#install","title":"Install","text":"<p>Untuk menginstall bisa dilihat di Locust Install Dokumentasi.</p> <p>Command</p> <ul> <li> <p>Install Python (jika anda belum menginstalasinya):</p> </li> <li> <p>Install Locust <pre><code>pip3 install locust\n</code></pre></p> </li> </ul>"},{"location":"belajar/etl/airbyte/#command-cli","title":"Command (CLI)","text":"<ul> <li>Menjalankan program locust  <pre><code>locust -f locustfile.py\n</code></pre></li> </ul>"},{"location":"belajar/etl/airbyte/#locustfile","title":"Locustfile","text":"<p>Pengujian Locust pada dasarnya hanyalah sebuah program Python yang membuat permintaan ke sistem yang ingin Anda uji. Hal ini membuatnya sangat fleksibel dan sangat baik dalam mengimplementasikan alur pengguna yang kompleks.</p> <p>Example</p> locustfile.py<pre><code>import logging\nfrom locust import HttpUser, task, between\nfrom random import randint\n\nPRODUCT_IDS = [9547, 9555, 9343, 10719, 10724]\nACCOUNT_IDS = []\n\n_logger = logging.getLogger(__name__)\n\nclass BaseUser(HttpUser):\n    wait_time = between(1, 3)\n    host = 'http://localhost:9004'\n    database = 'cbtl_180225'\n    session = None\n    abstract = True\n\n    @classmethod\n    def get_credentials(cls):\n        return None, None\n\n    def _get_request_header(self):\n        return {\n            'Content-Type': 'application/json',\n            'X-Session-Id': self.session,\n        }\n\n    def on_start(self):\n        _logger.info(f'START {self.__class__.__name__.upper()}')\n        self.login()\n\n    def on_stop(self):\n        _logger.info(f'STOP {self.__class__.__name__.upper()}')\n\n    def login(self):\n        \"\"\" Login ke Odoo menggunakan endpoint API autentikasi. \"\"\"\n        username, password = self.get_credentials()\n        if not username or not password:\n            print(\"Username dan password harus diisi!\")\n            return\n\n        payload = {\n            'jsonrpc': '2.0',\n            'params': {\n                'db': self.database,\n                'login': username,\n                'password': password\n            }\n        }\n        response = self.client.post('/web/session/authenticate', json=payload)\n        if response.status_code == 200 and response.json().get('result', {}).get('uid'):\n            self.session = response.cookies.get('session_id')\n            _logger.info(f'Login {username} berhasil!')\n        else:\n            self.stop()\n            _logger.error(f'Gagal login {username}: {response.text}')\n\n    def odoo_call(self, model, method, *args, **kwargs):\n        if not self.session:\n            print('Tidak ada session. Pastikan login berhasil.')\n            return None\n\n        payload = {\n            'jsonrpc': '2.0',\n            'method': 'call',\n            'params': {\n                'model': model,\n                'method': method,\n                'args': list(args),\n                'kwargs': kwargs\n            },\n        }\n        response = self.client.post('/web/dataset/call_kw', json=payload, headers=self._get_request_header()).json()\n        return {\n            'success': 'result' in response,\n            'response': response.get('result') or response.get('error', {})\n        }\n\nclass AdminUser(BaseUser):\n    weight = 1  # 100 user\n\n    @classmethod\n    def get_credentials(cls):\n        return 'admin', '4dm1nodoo14c2023'\n\n    @task\n    def load_testing_search_valuations(self):\n        domain = []\n        len_valuations = self.odoo_call('stock.valuation.layer', 'search_count', domain)\n        pages = int(len_valuations['response'])\n        for page in range(1, pages, 80):\n            valuations = self.odoo_call('stock.valuation.layer', 'search', domain, limit=80, offset=page, order='id ASC')\n            if valuations['success']:\n                _logger.info('Success Get Valuation')\n            else:\n                _logger.warning('Failed Get Valuation')\n</code></pre> <p>Untuk lebih lengkapnya dapat melihat di Locust Documentation</p>"},{"location":"belajar/load_testing/locust/","title":"Locust","text":"<p>Locust adalah alat sumber terbuka berbasis Python untuk melakukan load testing pada aplikasi web. Locust memungkinkan pengguna untuk mensimulasikan ribuan pengguna secara bersamaan untuk menguji performa API, website, atau aplikasi berbasis HTTP.</p>"},{"location":"belajar/load_testing/locust/#install","title":"Install","text":"<p>Untuk menginstall bisa dilihat di Locust Install Dokumentasi.</p> <p>Command</p> <ul> <li> <p>Install Python (jika anda belum menginstalasinya):</p> </li> <li> <p>Install Locust <pre><code>pip3 install locust\n</code></pre></p> </li> </ul>"},{"location":"belajar/load_testing/locust/#command-cli","title":"Command (CLI)","text":"<ul> <li>Menjalankan program locust  <pre><code>locust -f locustfile.py\n</code></pre></li> </ul>"},{"location":"belajar/load_testing/locust/#locustfile","title":"Locustfile","text":"<p>Pengujian Locust pada dasarnya hanyalah sebuah program Python yang membuat permintaan ke sistem yang ingin Anda uji. Hal ini membuatnya sangat fleksibel dan sangat baik dalam mengimplementasikan alur pengguna yang kompleks.</p> <p>Example</p> locustfile.py<pre><code>import logging\nfrom locust import HttpUser, task, between\nfrom random import randint\n\nPRODUCT_IDS = [9547, 9555, 9343, 10719, 10724]\nACCOUNT_IDS = []\n\n_logger = logging.getLogger(__name__)\n\nclass BaseUser(HttpUser):\n    wait_time = between(1, 3)\n    host = 'http://localhost:9004'\n    database = 'cbtl_180225'\n    session = None\n    abstract = True\n\n    @classmethod\n    def get_credentials(cls):\n        return None, None\n\n    def _get_request_header(self):\n        return {\n            'Content-Type': 'application/json',\n            'X-Session-Id': self.session,\n        }\n\n    def on_start(self):\n        _logger.info(f'START {self.__class__.__name__.upper()}')\n        self.login()\n\n    def on_stop(self):\n        _logger.info(f'STOP {self.__class__.__name__.upper()}')\n\n    def login(self):\n        \"\"\" Login ke Odoo menggunakan endpoint API autentikasi. \"\"\"\n        username, password = self.get_credentials()\n        if not username or not password:\n            print(\"Username dan password harus diisi!\")\n            return\n\n        payload = {\n            'jsonrpc': '2.0',\n            'params': {\n                'db': self.database,\n                'login': username,\n                'password': password\n            }\n        }\n        response = self.client.post('/web/session/authenticate', json=payload)\n        if response.status_code == 200 and response.json().get('result', {}).get('uid'):\n            self.session = response.cookies.get('session_id')\n            _logger.info(f'Login {username} berhasil!')\n        else:\n            self.stop()\n            _logger.error(f'Gagal login {username}: {response.text}')\n\n    def odoo_call(self, model, method, *args, **kwargs):\n        if not self.session:\n            print('Tidak ada session. Pastikan login berhasil.')\n            return None\n\n        payload = {\n            'jsonrpc': '2.0',\n            'method': 'call',\n            'params': {\n                'model': model,\n                'method': method,\n                'args': list(args),\n                'kwargs': kwargs\n            },\n        }\n        response = self.client.post('/web/dataset/call_kw', json=payload, headers=self._get_request_header()).json()\n        return {\n            'success': 'result' in response,\n            'response': response.get('result') or response.get('error', {})\n        }\n\nclass AdminUser(BaseUser):\n    weight = 1  # 100 user\n\n    @classmethod\n    def get_credentials(cls):\n        return 'admin', '4dm1nodoo14c2023'\n\n    @task\n    def load_testing_search_valuations(self):\n        domain = []\n        len_valuations = self.odoo_call('stock.valuation.layer', 'search_count', domain)\n        pages = int(len_valuations['response'])\n        for page in range(1, pages, 80):\n            valuations = self.odoo_call('stock.valuation.layer', 'search', domain, limit=80, offset=page, order='id ASC')\n            if valuations['success']:\n                _logger.info('Success Get Valuation')\n            else:\n                _logger.warning('Failed Get Valuation')\n</code></pre> <p>Untuk lebih lengkapnya dapat melihat di Locust Documentation</p>"},{"location":"belajar/monitoring/grafana/","title":"Grafana","text":"<p>Grafana adalah alat yang digunakan untuk menganalisis dan memvisualisasikan data. Salah satu data yang dapat divisualisasikan adalah data metrik yang didapatkan dari prometheus.</p> <p>Command Install</p> <p>Untuk menginstall grafana bisa dilihat Grafana OSS Docs.</p> <ul> <li>Install the prerequisite packages:</li> </ul> <pre><code>import tensorflow as tf\n</code></pre> <p><pre><code>sudo apt-get install -y apt-transport-https software-properties-common wget\n</code></pre> <pre><code>    :::python\n    print('hellow world')\n</code></pre></p>"},{"location":"belajar/monitoring/prometheus/","title":"Prometheus","text":"<p>Prometheus mengumpulkan dan menyimpan metriknya sebagai data deret waktu, yaitu informasi metrik disimpan dengan stempel waktu saat direkam, di samping pasangan nilai-kunci opsional yang disebut label.</p> <p>Command Install</p> <ul> <li> <p>Download source prometheus <pre><code>wget [prometheus-link]\n</code></pre></p> </li> <li> <p>Ekstrak prometheus yang sudah didownload <pre><code>tar -xzvf [prometheus-file-zip]\n</code></pre></p> </li> <li> <p>Menambahkan group baru dengan nama <code>prometheus</code> <pre><code>sudo groupadd --system prometheus\n</code></pre></p> </li> <li> <p>Menambahkan user baru dengan nama <code>prometheus</code> tanpa menggunakan login dan menambahkannya ke dalam group <code>prometheus</code> yang sudah dibuat <pre><code>sudo useradd --system prometheus -s /sbin/nologin -g prometheus\n</code></pre></p> </li> <li> <p>Memindahkan file executable (<code>prometheus</code>, <code>promtool</code>) ke direktori <code>/usr/local/bin</code> <pre><code>sudo mv prometheus promtool /usr/local/bin\n</code></pre></p> </li> <li> <p>Membuatkan directory config prometheus di <code>/etc</code> <pre><code>sudo mkdir /etc/prometheus\n</code></pre></p> </li> <li> <p>Memindahkan file config ke dalam directory config yang sudah dibuat <pre><code>sudo mv console_libraries consoles prometheus.yml /etc/prometheus\n</code></pre></p> </li> <li> <p>Membuatkan directory untuk menyimpan data prometheus di <code>/var/lib</code> <pre><code>sudo mkdir /var/lib/prometheus\n</code></pre></p> </li> <li> <p>Merubah hak akses directory yang digunakan untuk menyimpan data <pre><code>sudo chown -R prometheus:prometheus /var/lib/prometheus\n</code></pre></p> </li> <li> <p>Membuat service untuk menjalankan prometheus <pre><code>sudo nano /etc/systemd/system/prometheus.service\n</code></pre></p> </li> <li> <p>Isi dari <code>prometheus.service</code> <pre><code>[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.console.libraries=/etc/prometheus/console_libraries\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> </li> <li> <p>Reload systemd <pre><code>sudo systemctl daemon-reload\n</code></pre></p> </li> <li> <p>Enable prometheus <pre><code>sudo systemctl enable prometheus\n</code></pre></p> </li> <li> <p>Start prometheus <pre><code>sudo systemctl start prometheus\n</code></pre></p> </li> <li> <p>Cek status prometheus service <pre><code>sudo systemctl status prometheus\n</code></pre></p> </li> </ul>"},{"location":"belajar/monitoring/prometheus/#add-ons","title":"Add-ons","text":"<p>Prometheus menyediakan beberapa addons untuk mendapatkan data metrik, yaitu :</p>"},{"location":"belajar/monitoring/prometheus/#node-exporter","title":"Node Exporter","text":"<p>Node Exporter dapat digunakan untuk mengumpulkan metrik perangkat keras dan OS yang diekspos oleh kernel.</p> <p>Command Install</p> <ul> <li> <p>Download source node_exporter <pre><code>wget [node_exporter-link]\n</code></pre></p> </li> <li> <p>Ekstrak node_exporter yang sudah didownload <pre><code>tar -xzvf [node_exporter-file-zip]\n</code></pre></p> </li> <li> <p>Memindahkan file executable (<code>node_exporter</code>) ke direktori <code>/usr/local/bin</code> <pre><code>sudo mv node_exporter /usr/local/bin\n</code></pre></p> </li> <li> <p>Membuat service untuk menjalankan node_exporter <pre><code>sudo nano /etc/systemd/system/node_exporter.service\n</code></pre></p> </li> <li> <p>Isi dari <code>node_exporter.service</code> <pre><code>[Unit]\nDescription=Prometheus Node Exporter\n\n[Service]\nRestart=always\nUser=prometheus\nType=simple\nExecReload=/bin/kill -HUP $MAINPID\nTimeoutStopSec=20s\nSendSIGKILL=no\nExecStart=/usr/local/bin/node_exporter\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> </li> <li> <p>Reload systemd <pre><code>sudo systemctl daemon-reload\n</code></pre></p> </li> <li> <p>Enable node_eporter <pre><code>sudo systemctl enable node_eporter\n</code></pre></p> </li> <li> <p>Start node_eporter <pre><code>sudo systemctl start node_eporter\n</code></pre></p> </li> <li> <p>Cek status node_eporter service <pre><code>sudo systemctl status node_eporter\n</code></pre></p> </li> <li> <p>Menambahkan node_exporter dikonfigurasi prometheus <pre><code>sudo nano /etc/prometheus/prometheus.yml\n</code></pre></p> </li> </ul> <pre><code>  - job_name: \"node_exporter\"\n    static_configs:\n      - targets: [\"localhost:9100\"]\n</code></pre> <ul> <li>Restart service prometheus <pre><code>sudo systemctl restart prometheus\n</code></pre></li> </ul>"},{"location":"belajar/provisioning/ansible/","title":"Ansible","text":""},{"location":"belajar/provisioning/ansible/#ansible-dasar","title":"Ansible Dasar","text":""},{"location":"belajar/provisioning/ansible/#ansible-inventory","title":"Ansible Inventory","text":""},{"location":"belajar/provisioning/ansible/#ansible-playbook","title":"Ansible Playbook","text":""},{"location":"belajar/provisioning/ansible/#ansible-role","title":"Ansible Role","text":""},{"location":"belajar/server/nat_vps/","title":"NAT VPS","text":"<p>NAT VPS (Network Address Translation Virtual Private Server) adalah jenis VPS (Virtual Private Server) yang tidak mendapatkan alamat IP publik khusus untuk dirinya sendiri.</p> <p>Sebaliknya, beberapa NAT VPS berbagi satu alamat IP publik yang sama, dan penyedia VPS menggunakan teknologi NAT (Network Address Translation) untuk meneruskan lalu lintas jaringan antara alamat IP publik tersebut dan alamat IP internal (privat) dari masing-masing VPS.</p> <p>Provider</p> <ul> <li>Hostdata</li> <li>NyanHosting</li> <li>Whplus</li> <li>WeDoHosting</li> </ul>"},{"location":"belajar/server/nat_vps/#systemd-service","title":"Systemd Service","text":"<p>Agar website kita dapat berjalan di background maka kita perlu membuat service</p> <ul> <li> <p>Buat file baru di direktori <code>systemd</code> <pre><code>sudo nano /etc/systemd/system/app.service\n</code></pre></p> </li> <li> <p>Contoh file service <pre><code>[Unit]\nDescription=Odoo 17 Calhoun\nAfter=network.target\n\n[Service]\nType=simple\nUser=odoo\nGroup=odoo\nExecStart=/opt/odoo17g_calhoun/Env/bin/python3.10 /opt/odoo17g_calhoun/odoo-bin -c /etc/odoo17g_calhoun.conf\nWorkingDirectory=/opt/odoo17g_calhoun/\nStandardOutput=journal\nStandardError=journal\nRestart=always\nRestartSec=3\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> </li> <li> <p>Aktifkan dan mulai service <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable app.service\nsudo systemctl start app.service\n</code></pre></p> </li> <li> <p>Periksa status service <pre><code>sudo systemctl status app.service\n</code></pre></p> </li> <li> <p>Untuk memeriksa log service <pre><code>journalctl -u app.service\n</code></pre></p> </li> </ul>"},{"location":"belajar/server/nat_vps/#web-server","title":"Web Server","text":"<p>Agar web server kita dapat diakses dari luar harus menggunakan tunneling. disini saya menggunakan cloudflare tunnel.</p> <p>Setting Nginx</p> <ul> <li> <p>Install Nginx <pre><code>apt install nginx\n</code></pre></p> </li> <li> <p>Hapus default file di <code>/etc/nginx/sites-enabled/</code> <pre><code>sudo unlink /etc/nginx/sites-enabled/default\n</code></pre></p> </li> <li> <p>Hapus default file di <code>/etc/nginx/sites-available/</code> dan <code>/etc/nginx/sites-enabled/</code> <pre><code>rm default\n</code></pre></p> </li> <li> <p>Buat file dengan nama domain anda <pre><code>nano /etc/nginx/sites-available/example.com\n</code></pre></p> </li> <li> <p>Contoh file nginx untuk odoo <pre><code>upstream odoo {\n    server 127.0.0.1:8069;\n}\n\nupstream odoochat {\n    server 127.0.0.1:8072;\n}\n\nserver {\n    listen [::]:80;\n    server_name example.com www.example.com;\n\n    access_log /var/log/nginx/example.com.access.log;\n    error_log /var/log/nginx/example.com.error.log;\n\n    #proxy_buffers 16 64k;\n    #proxy_buffer_size 128k;\n\n    location / {\n        if ($request_method = 'OPTIONS') {\n            add_header 'Access-Control-Allow-Origin' '*';\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';\n            add_header 'Access-Control-Max-Age' 1728000;\n            add_header 'Content-Type' 'text/plain; charset=utf-8';\n            add_header 'Content-Length' 0;\n            return 204;\n        }\n        if ($request_method = 'POST') {\n            add_header 'Access-Control-Allow-Origin' '*' always;\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;\n        }\n        if ($request_method = 'GET') {\n            add_header 'Access-Control-Allow-Origin' '*' always;\n            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\n            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;\n            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;\n        }\n        proxy_pass http://odoo;\n        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto https;\n    }\n\n    location /longpolling {\n        proxy_pass http://odoochat;\n    }\n}\n</code></pre></p> </li> <li> <p>Kemudian buat file executable di sites-enabled <pre><code>ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/\n</code></pre></p> </li> </ul> <p>Setting Certbot Lets Encrypt</p> <ul> <li> <p>Install Certbot <pre><code>sudo apt install certbot python3-certbot-nginx\n</code></pre></p> </li> <li> <p>Memasang SSL Sertifikat di Konfigurasi Nginx Anda <pre><code>sudo certbot --nginx -d example.com -d www.example.com\n</code></pre></p> </li> <li> <p>Kemudian masukan informasi yang diperlukan sesuai dengan informasi yang di domain anda</p> </li> <li> <p>Verifikasi Certbot Auto-Renewal <pre><code>sudo systemctl status certbot.timer\n</code></pre></p> </li> <li> <p>Tes renewal process <pre><code>sudo certbot renew --dry-run\n</code></pre></p> </li> </ul> <p>Setting Host</p> <ul> <li> <p>Edit konfigurasi pada file <code>/etc/hosts</code> <pre><code>nano /etc/hosts\n</code></pre></p> </li> <li> <p>Tambahkan konfigurasi ini <pre><code>127.0.0.1       example.com\n</code></pre></p> </li> </ul> <p>Setting Domain di CloudFlare</p> <p>Langkah pertama yang harus dilakukan tambahkan nama_domain anda pada cloudflare </p> <p>Kemudian masukan nama_domain anda </p> <p>Kemudian arahkan domain anda ke nameserver cloudflare </p> <p>Lalu tambahkan record untuk ipv6 menggunakan Type AAAA,tambahkan sesuai Ipv6 anda. </p> <p>Kemudian tunggu beberapa saat dan coba domain anda di browser.</p> <p>Untuk lebih lengkapnya dapat melihat di Tutorial Cara Menghosting website di Nat VPS menggunakan IPv6</p>"},{"location":"belajar/virtualization/vagrant/","title":"Vagrant","text":"<p>Vagrant adalah alat yang digunakan untuk membuat virtual machine secara otomatis, kita hanya perlu membuat sebuah <code>Vagrantfile</code>. Alat pembuat virtual machine yang didukung adalah <code>Virtual Box</code>, <code>VMware</code>, <code>Hyper-V</code> dan lainnya. Sebuah base OS seperti Ubuntu, CentOS dan lain-lain disebut dengan box.</p>"},{"location":"belajar/virtualization/vagrant/#install","title":"Install","text":"<p>Untuk menginstall bisa dilihat di Vagrant Install Dokumentasi.</p> <p>Command</p> <ul> <li> <p>Menambahkan ke repository: <pre><code>wget -O - https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n</code></pre></p> </li> <li> <p>Update dan Install Vagrant <pre><code>sudo apt update &amp;&amp; sudo apt install vagrant\n</code></pre></p> </li> </ul>"},{"location":"belajar/virtualization/vagrant/#command-cli","title":"Command (CLI)","text":"<ul> <li> <p>Inisialisasi direktori saat ini menjadi lingkungan  Vagrant  <pre><code>vagrant init BOX-NAME\n</code></pre></p> </li> <li> <p>Menghapus VM yang sudah dibuat <pre><code>vagrant destroy VM-NAME\n</code></pre></p> </li> <li> <p>Melihat status dari VM yang terbuat <pre><code>vagrant status VM-NAME\n</code></pre></p> </li> <li> <p>Membuat VM dari Vagrantfile atau Menghidupkan VM yang ada <pre><code>vagrant up\n</code></pre></p> </li> <li> <p>Shutdown VM <pre><code>vagrant halt\n</code></pre></p> </li> <li> <p>Masuk ke dalam VM yang sudah dibuat menggunakan SSH <pre><code>vagrant ssh VM-NAME\n</code></pre></p> </li> <li> <p>Untuk menambahkan box <pre><code>vagrant box add ADDRESS\n</code></pre></p> </li> <li> <p>Untuk melihat box yang sudah terinstall <pre><code>vagrant box list\n</code></pre></p> </li> <li> <p>Untuk menghapus box <pre><code>vagrant box remove NAME\n</code></pre></p> </li> </ul>"},{"location":"belajar/virtualization/vagrant/#vagrantfile","title":"Vagrantfile","text":"<p>Vagrantfile di bawah ini akan membuat 2 VM dengan base <code>ubuntu/trusty64</code> dengan nama app dan db. Dan VM yang terbuat sudah terinstall apache2</p> <p>Example</p> Vagrantfile<pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  # Nama box yang akan digunakan\n  config.vm.box = \"ubuntu/trusty64\"\n  config.vm.box_version = \"20191107.0.0\"\n\n  # Definisi untuk memberitahu vagrant bahwa kita menggunakan \n  # virtualbox sebagai provider\n  # Konfigurasi spesifikasi dari virtualbox yang akan dibuat\n  config.vm.provider \"virtualbox\" do |vb|\n    vb.gui = false  \n    vb.memory = \"1024\"\n    vb.cpus = 1\n    vb.linked_clone = true\n  end\n\n  # Definisi untuk VM yang dibuat dengan nama app \n  # dan konfigurasi network yang diterapkan\n  config.vm.define \"app\" do |app|\n    app.vm.network :private_network, ip: \"10.10.10.20\"\n  end\n\n  # Definisi untuk VM yang dibuat dengan nama db\n  # dan konfigurasi network yang diterapkan\n  config.vm.define \"db\" do |db|\n    db.vm.network :private_network, ip: \"10.10.10.21\"\n  end\n\n  # Code di bawah ini akan dijalankan pada saat vagrant berhasil membuat VM \n  # atau pada saat kita menjalankan vagrant up\n  config.vm.provision \"shell\", inline: &lt;&lt;-SHELL\n    apt-get update\n    apt-get install -y apache2\n  SHELL\nend\n</code></pre> <p>Untuk lebih lengkapnya dapat melihat di Vagrant Documentation</p>"},{"location":"catatan/about/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"catatan/about/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"catatan/about/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>a = 10\ndef testing():\n    print('HALOOOOOOOO')\n</code></pre> <pre><code>function myFunction() {\n    alert(\"Hello World!\");\n}\n</code></pre> <p>Odoo v15 | v16</p> <p>Dokumentasi ini mungkin tidak berfungsi diversi yang lain.</p>"},{"location":"catatan/about/#entah","title":"Entah","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris in lacinia justo. Quisque consectetur felis vitae lorem ullamcorper varius in id leo. Proin commodo placerat augue ultricies molestie. Sed auctor lectus eget velit maximus, vel scelerisque urna ullamcorper. Nunc interdum aliquam metus, nec ultricies justo gravida ac. Curabitur quis nunc tempor, tempor diam non, consectetur arcu. Donec mollis turpis quis mauris consectetur, in elementum elit ullamcorper. Morbi fringilla sem sit amet urna tempor auctor. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae;</p> <p>Aenean ac pulvinar libero. Nulla augue ex, consectetur rutrum rhoncus at, dignissim vel ante. Maecenas scelerisque fermentum velit vitae sagittis. Maecenas rhoncus augue fringilla tellus iaculis, at interdum lectus blandit. Sed placerat nulla at aliquam placerat. Proin non tristique libero, at tincidunt sapien. Nunc imperdiet nunc eu risus mattis, vitae interdum ante blandit. Nam velit augue, gravida sit amet euismod convallis, varius et magna. Suspendisse commodo justo a justo elementum ultricies. Aenean aliquam porttitor mauris, commodo cursus orci. In et ex in nibh lacinia cursus. Morbi accumsan nisi quis nunc placerat, ac lacinia est sodales. Phasellus lorem nisi, ultrices vel mi sit amet, semper lobortis augue. Vivamus tortor tellus, vehicula id eros vel, dictum venenatis sapien.</p> <p>In sit amet nisl facilisis sem euismod lacinia a a augue. Nulla sed tortor sed erat facilisis pharetra. Phasellus pharetra, turpis eu varius interdum, erat elit euismod felis, et interdum augue sapien vel lacus. Pellentesque vehicula molestie nisl, a elementum lorem porta ac. Mauris urna nunc, tempus vel sem eu, vehicula fermentum sapien. Sed quis metus venenatis, varius dolor feugiat, varius quam. Cras imperdiet feugiat dolor, eu vehicula ante porta in. Quisque euismod bibendum porttitor.</p> <p>Curabitur nec magna molestie, tincidunt risus vel, sollicitudin nulla. Nulla ligula metus, ultricies quis tempus ut, ornare facilisis sem. Aliquam sit amet elementum sapien. Donec risus tortor, euismod at porttitor eget, efficitur quis dolor. Sed eget dapibus leo, nec ultrices risus. Nulla at turpis a mauris dignissim interdum id nec tellus. Morbi porta ut libero sed convallis. Sed non magna arcu. Duis sed odio vulputate, condimentum nibh in, iaculis lectus. Donec mollis pretium odio et scelerisque. Vestibulum gravida, risus vitae commodo ultricies, quam sapien porttitor diam, non hendrerit purus turpis vel augue. Morbi at justo in sem porttitor feugiat eget eu magna. In in sapien vehicula, lacinia risus eu, faucibus lorem. Sed commodo metus et tellus congue ultrices. Cras tincidunt molestie placerat.</p> <p>Proin luctus, lorem ac laoreet dignissim, ex ante tempor elit, ut laoreet augue est malesuada eros. Aenean malesuada interdum nunc, sed dictum felis luctus vitae. Vestibulum convallis tincidunt mauris, sit amet venenatis est sollicitudin in. Nulla sed est ipsum. Nullam facilisis augue non quam scelerisque commodo. Cras a nisl pharetra lacus auctor fringilla. Nunc iaculis sem lectus, nec efficitur dolor dapibus vitae. Ut tempor urna vel tortor sodales, tincidunt mollis velit mollis. Maecenas dictum et dui ut venenatis. Nulla eget rhoncus arcu. Suspendisse rhoncus et nisl vitae elementum. Aenean vitae rhoncus arcu, ac elementum metus. Nulla tincidunt mollis cursus. Vivamus fringilla non tellus sed sollicitudin. Suspendisse rutrum tincidunt nisl eu convallis. Suspendisse finibus tincidunt ligula eu rutrum. </p>"},{"location":"catatan/openvpn/","title":"OpenVPN","text":"<p>OpenVPN adalah protokol Virtual Private Network (VPN) sumber terbuka yang digunakan untuk membuat koneksi terenkripsi antar perangkat. OpenVPN merupakan salah satu protokol VPN yang paling aman dan populer karena menawarkan tingkat keamanan tinggi, fleksibel, dan kompatibel dengan sebagian besar sistem operasi.</p> <p>Command Install</p> <ul> <li> <p>Memperbarui daftar paket yang tersedia dan versinya <pre><code>sudo apt update\n</code></pre></p> </li> <li> <p>Install OpenVPN <pre><code>sudo apt install openvpn\n</code></pre></p> </li> </ul> <p>Command to Activate OpenVPN</p> <p>Untuk mengaktifkan OpenVPN di ubuntu 22.04 perlu menjalankan beberapa perintah antara lain :</p> <ul> <li> <p>Mengimport config OpenVPN agar dapat dengan mudah digunakan kembali <pre><code>openvpn3 config-import --config [path-to-ovpn-config] --name [CONFIG_NAME] --persistent\n</code></pre></p> </li> <li> <p>Jangan dilakukan jika tidak kebutuhan darurat <pre><code>openvpn3 config-manage --config [CONFIG_NAME] --allow-compression yes\n</code></pre></p> </li> <li> <p>Menjalankan OpenVPN <pre><code>openvpn3 session-start --config [CONFIG_NAME]\n</code></pre></p> </li> <li> <p>Memasukkan username &amp; password</p> </li> </ul>"},{"location":"catatan/technical/","title":"Dokumentasi Technical","text":"<p>Selamat datang di Dokumentasi Technical untuk aplikasi khusus yang dikembangkan oleh Artsys Integrasi Solusindo untuk klien kami yang berharga. Panduan komprehensif ini dirancang untuk memberikan pemahaman kepada pengguna teknis tentang cara kerja, arsitektur, dan aspek penyesuaian aplikasi Odoo.</p> <p>Dalam dokumentasi ini, Anda akan menemukan wawasan terperinci tentang dasar-dasar teknis dari solusi khusus kami. Dokumentasi ini akan membekali Anda dengan pengetahuan yang diperlukan untuk menavigasi, memperluas, dan memelihara aplikasi secara efektif.</p> <p>Semoga Anda mengerti \ud83e\udd2a</p>"},{"location":"catatan/technical/#install","title":"Install","text":"<p>Untuk menginstall Odoo dapat dilihat di sini.</p>"},{"location":"catatan/technical/#addonsmodul","title":"Addons/Modul","text":"<p>Selamat datang di dokumentasi Modul, dokumentasi yang dirancang untuk membantu programmer dalam mengelola modul dengan keterampilan yang diperlukan untuk membuat, mengelola, dan memelihara modul dalam aplikasi Odoo yang disesuaikan yang dikembangkan oleh Artsys Integrasi Solusindo. Bagian ini berfokus pada aspek-aspek utama manajemen modul, memberikan Anda wawasan tentang struktur modul, pembuatan versi, penulisan deskripsi, dan pembuatan ringkasan yang efektif.</p> <p>Download module.</p>"},{"location":"catatan/technical/#membuat-modul","title":"Membuat Modul","text":"<p>Sebelum membuat modul anda harus paham terlebih dahulu tentang struktur modul. Struktur modul Odoo adalah sebagai berikut.</p> <pre><code>your_module\n\u251c\u2500\u2500 controllers\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 your_controller.xml\n\u251c\u2500\u2500 data\n\u2502   \u2514\u2500\u2500 your_data.xml\n\u251c\u2500\u2500 demo\n\u2502   \u2514\u2500\u2500 your_demo.xml\n\u251c\u2500\u2500 models\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 your_model.xml\n\u251c\u2500\u2500 security\n\u2502   \u2514\u2500\u2500 ir.model.access.csv\n\u251c\u2500\u2500 static\n\u2502   \u251c\u2500\u2500 description\n\u2502   \u2502   \u251c\u2500\u2500 icon.png\n\u2502   \u2502   \u2514\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 other_folder\n\u251c\u2500\u2500 views\n\u2502   \u2514\u2500\u2500 your_view.xml\n\u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 __manifest__.py\n</code></pre>"},{"location":"catatan/technical/#controllers","title":"<code>controllers</code>","text":""},{"location":"catatan/technical/#data","title":"<code>data</code>","text":"<p>Folder data digunakan untuk menyimpan data yang ditulis dengan xml. </p> <p><pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;odoo&gt;\n    &lt;data noupdate=\"1\"&gt;\n        &lt;record id=\"record_name\" model=\"model_name\"&gt;\n            &lt;field name=\"field_name\"&gt;field_value&lt;/field&gt;\n        &lt;/record&gt;\n    &lt;/data&gt;\n&lt;/odoo&gt;\n</code></pre> Penjelasan lebih lengkapnya ada di sini.</p>"},{"location":"catatan/technical/#demo","title":"<code>demo</code>","text":""},{"location":"catatan/technical/#models","title":"<code>models</code>","text":""},{"location":"catatan/technical/#security","title":"<code>security</code>","text":""},{"location":"catatan/technical/#static","title":"<code>static</code>","text":""},{"location":"catatan/technical/#views","title":"<code>views</code>","text":""},{"location":"catatan/technical/#__init__py","title":"<code>__init__.py</code>","text":""},{"location":"catatan/technical/#__manifest__py","title":"<code>__manifest__.py</code>","text":"<p>Contoh <code>__manifest__.py</code> <pre><code>{\n    'name': 'Module Name',\n    'version': '2023.2023.1',\n    'description': 'Description text',\n    'summary': 'Summary text',\n    'author': 'PT Artsys Integrasi Solusindo',\n    'website': 'https://artsys.id',\n    'license': 'LGPL-3',\n    'category': 'Artsys/Artsys',\n    'depends': [\n        'base'\n    ],\n    'data': [\n        'views/mymodule_view.xml',\n    ],\n    'demo': [\n        'demo/demo_data.xml',\n    ],\n    'installable': True,\n    'auto_install': False,\n    'application': False,\n    'assets': {\n        'web.assets_backend': [\n            'module_name/static/src/your_path'\n        ],\n    }\n}\n</code></pre> <code>name</code></p> <p>Nama modul yang dapat dibaca manusia, seperti contoh: <code>Sale Management</code>. Untuk nama yang kurang baik adalah seperti <code>sale_management</code>.</p> <p><code>version</code></p> <p>Dalam menentukan versi untuk sebuah modul, sebaiknya anda mengikuti aturan berikut <code>x.y.z</code> agar memudahkan dalam pembacaan versi oleh orang lain. Penjelasan versinya seperti di bawah ini.</p> <ul> <li><code>x</code> Tahun Dibuat</li> <li><code>y</code> Tahun Diperbarui</li> <li><code>z</code> Iterator <code>default 1</code></li> </ul> <p><code>description</code></p> <p>Untuk membuat deskripsi untuk sebuah modul anda mempunyai 2 pilihan</p> <ul> <li>Menuliskan langsung di <code>__manifest__.py</code> di bagian <code>description</code></li> <li>Membuat file <code>index.html</code> di folder <code>static/description</code></li> </ul> <pre><code>&lt;section class=\"oe_container\"&gt;\n    &lt;div class=\"oe_row oe_spaced\"&gt;\n        &lt;h2 class=\"oe_slogan\"&gt;Nama Modul&lt;/h2&gt;\n        &lt;h3 class=\"oe_slogan\"&gt;Author&lt;/h3&gt;\n        &lt;p class=\"oe_mt32 text-center\"&gt;\n            Summary\n        &lt;/p&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n\n&lt;section class=\"container\"&gt;\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-12\"&gt;\n            &lt;h3 class=\"oe_slogan\"&gt;Overview&lt;/h3&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 text-center\"&gt;\n            &lt;h3 class=\"oe_slogan text-left\"&gt;Login Form&lt;/h3&gt;\n            &lt;img src=\"form_login.png\" alt=\"Login Form\" width=\"90%\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 text-center\"&gt;\n            &lt;h3 class=\"oe_slogan text-left\"&gt;Signup Form&lt;/h3&gt;\n            &lt;img src=\"form_signup.png\" alt=\"Signup Form\" width=\"90%\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 text-center\"&gt;\n            &lt;h3 class=\"oe_slogan text-left\"&gt;User Change Password&lt;/h3&gt;\n            &lt;img src=\"change_password.png\" alt=\"User Change Password\" width=\"90%\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 text-center\"&gt;\n            &lt;h3 class=\"oe_slogan text-left\"&gt;Tree View&lt;/h3&gt;\n            &lt;img src=\"tree_view.png\" alt=\"Tree View\" width=\"90%\"&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-12 text-center\"&gt;\n            &lt;h3 class=\"oe_slogan text-left\"&gt;Form View Editable &amp; Readonly&lt;/h3&gt;\n            &lt;div class=\"row\"&gt;\n                &lt;div class=\"col-6 text-right\"&gt;\n                    &lt;img src=\"form_view_editable.png\" alt=\"Form View Editable\" width=\"90%\"&gt;\n                &lt;/div&gt;\n                &lt;div class=\"col-6 text-left\"&gt;\n                    &lt;img src=\"form_view_readonly.png\" alt=\"Form View Readonly\" width=\"90%\"&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/section&gt;\n</code></pre> <p><code>summary</code></p> <p>Deskripsi singkat tentang modul.</p> <p><code>author</code></p> <p>Untuk author gunakan <code>PT Artsys Integrasi Solusindo</code>.</p> <p><code>website</code></p> <p>Alamat website PT Artsys Integrasi Solusindo.</p> <p><code>license</code></p> <p>Lisensi untuk distribusi modul. Daftar lisensi adalah sebagai berikut :</p> <ul> <li><code>GPL-2</code></li> <li><code>GPL-3</code></li> <li><code>GPL-3</code></li> <li><code>AGPL-3</code></li> <li><code>LGPL-3</code></li> <li><code>OEEL-1</code> (Odoo Enterprise Edition License v1.0)</li> <li><code>OPL-1</code> (Odoo Proprietary License v1.0)</li> <li>Dan lain-lain</li> </ul> <p><code>category</code></p> <p>Dalam menentukan sebuah kategori untuk sebuah modul, sebaiknya menggunakan <code>Artsys/Artsys</code> untuk memudahkan dalam mengelola modul tersebut di menu <code>Apps</code>.</p> <p><code>depends</code></p> <p>Modul Odoo yang harus dimuat sebelum modul ini, baik karena modul ini menggunakan fitur yang dibuat atau karena mengubah sumber daya yang ditentukan.</p> <p>Ketika sebuah modul diinstal, semua dependensinya diinstal sebelumnya.  Demikian pula dependensi dimuat sebelum modul dimuat.</p> <p>Info</p> <p>modul <code>base</code> selalu dipasang di setiap instance Odoo.  Namun Anda masih perlu menentukannya sebagai dependensi untuk memastikan modul Anda diperbarui ketika <code>base</code> diperbarui.</p> <p><code>data</code></p> <p><code>demo</code></p> <p><code>installable</code> (default <code>True</code>)</p> <p>Apakah pengguna dapat menginstal modul dari UI Web atau tidak. </p> <p><code>auto_install</code> (default <code>False</code>)</p> <p>Jika <code>True</code>, modul ini akan otomatis terinstal jika semua dependensi nya diinstal. </p> <p><code>application</code> (default <code>True</code>)</p> <p>Apakah modul harus dianggap sebagai aplikasi yang lengkap <code>True</code> atau hanya modul teknis <code>False</code> yang menyediakan beberapa fungsionalitas tambahan ke modul aplikasi yang ada. </p> <p><code>assets</code></p> <p>Definisi tentang bagaimana semua file statis dimuat dalam berbagai kumpulan aset. Penjelasan lebih lengkap dapat dilihat di sini.</p>"}]}